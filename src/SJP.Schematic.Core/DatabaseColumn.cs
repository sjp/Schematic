using System;
using System.ComponentModel;
using System.Diagnostics;
using LanguageExt;
using SJP.Schematic.Core.Utilities;

namespace SJP.Schematic.Core;

/// <summary>
/// A database column that stores information about a column in a table or a view.
/// </summary>
/// <seealso cref="IDatabaseColumn" />
[DebuggerDisplay("{" + nameof(DebuggerDisplay) + ",nq}")]
public class DatabaseColumn : IDatabaseColumn
{
    /// <summary>
    /// Initializes a new instance of the <see cref="DatabaseColumn"/> class.
    /// </summary>
    /// <param name="columnName">The name of the column. Only the local name is kept.</param>
    /// <param name="type">The column data type.</param>
    /// <param name="isNullable">Whether the column can hold <see langword="null" /> values.</param>
    /// <param name="defaultValue">The default value expression, if available.</param>
    /// <param name="autoIncrement">The auto-increment definition, if available.</param>
    /// <exception cref="ArgumentNullException"><paramref name="columnName"/> or <paramref name="type"/> is <see langword="null" /></exception>
    /// <exception cref="ArgumentException">The column name must be unqualified, i.e. not contain a server, database or schema name.</exception>
    public DatabaseColumn(
        Identifier columnName,
        IDbType type,
        bool isNullable,
        Option<string> defaultValue,
        Option<IAutoIncrement> autoIncrement
    )
    {
        ArgumentNullException.ThrowIfNull(columnName);
        if (columnName.Server != null || columnName.Database != null || columnName.Schema != null)
            throw new ArgumentException("The column name must be unqualified, i.e. not contain a server, database or schema name.", nameof(columnName));

        Name = columnName;
        Type = type ?? throw new ArgumentNullException(nameof(type));
        IsNullable = isNullable;
        DefaultValue = defaultValue;
        AutoIncrement = autoIncrement;
    }

    /// <summary>
    /// An expression that creates a default value for a column when omitted on an <c>INSERT</c> statement.
    /// </summary>
    /// <value>The default value for a column, if available.</value>
    public Option<string> DefaultValue { get; }

    /// <summary>
    /// Determines whether the values of this column are generated by the database.
    /// </summary>
    /// <value><see langword="true" /> if the values within this column are computed by the database; otherwise, <see langword="false" />.</value>
    /// <remarks>Always <see langword="false" /> unless a derived type overrides this behaviour.</remarks>
    public virtual bool IsComputed { get; }

    /// <summary>
    /// The name of a column within a table or view.
    /// </summary>
    /// <value>A column name.</value>
    public Identifier Name { get; }

    /// <summary>
    /// The database column data type.
    /// </summary>
    /// <value>A column data type.</value>
    public IDbType Type { get; }

    /// <summary>
    /// Determines whether a column can store <see langword="null" /> values.
    /// </summary>
    /// <value><see langword="true" /> if this column can store <see langword="null" /> values; otherwise, <see langword="false" />.</value>
    public bool IsNullable { get; }

    /// <summary>
    /// Retrieves the auto-increment parameters applies to this column, if available.
    /// </summary>
    /// <value>An automatic increment definition, if available.</value>
    public Option<IAutoIncrement> AutoIncrement { get; }

    /// <summary>
    /// Returns a string that provides a basic string representation of this object.
    /// </summary>
    /// <returns>A <see cref="string"/> that represents this instance.</returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override string ToString() => DebuggerDisplay;

    private string DebuggerDisplay
    {
        get
        {
            var builder = StringBuilderCache.Acquire();

            builder.Append("Column: ")
                .Append(Name.LocalName);

            return builder.GetStringAndRelease();
        }
    }
}